# used to create the object
name: ShadowHandRope # Changed name for the base task

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym.
env: 
  numEnvs: ${resolve_default:16384,${...num_envs}}
  envSpacing: 0.75
  episodeLength: 600 # Adjust as needed for the rope task
  enableDebugVis: False
  aggregateMode: 1

  clipObservations: 5.0
  clipActions: 1.0

  stiffnessScale: 1.0
  forceLimitScale: 1.0

  useRelativeControl: False
  dofSpeedScale: 20.0
  actionsMovingAverage: 1.0
  controlFrequencyInv: 1 # 60 Hz

  startPositionNoise: 0.01
  startRotationNoise: 0.0

  resetPositionNoise: 0.01
  resetRotationNoise: 0.0
  resetDofPosRandomInterval: 0.2
  resetDofVelRandomInterval: 0.0

  # Random forces applied to the object
  forceScale: 0.0
  forceProbRange: [0.001, 0.1]
  forceDecay: 0.99
  forceDecayInterval: 0.08

  # reward -> dictionary - Values copied from Spin, may need tuning for Rope task
  distRewardScale: 0.1 
  rotRewardScale: 1.0 
  actionPenaltyScale: -0.0002
  reachGoalBonus: 250 
  fallDistance: 0.24
  fallPenalty: 0.0
  rotEps: 0.1 # Added from Spin example

  # *** Changed objectType and added rope asset file ***
  objectType: "rope" # Changed from "pen"
  observationType: "full_state" # can be "openai", "full_no_vel", "full", "full_state"
  asymmetric_observations: False
  successTolerance: 0.1
  printNumSuccesses: False
  maxConsecutiveSuccesses: 0

  asset:
    assetFileName: "mjcf/open_ai_assets/hand/shadow_hand.xml"
    # Removed block/egg/pen defaults, added rope
    assetFileNameRope: "mjcf/solid_rope/rope.urdf" 

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

task:
  randomize: False # Set to True to enable randomization
  # --- START DIAGNOSTIC EDIT ---
  # Comment out the entire block below to see if it resolves the interpolation error
  # randomization_params:
  #   # Specify randomization parameters here if randomize: True
  #   # Example (copied from ShadowHandSpin, adjust as needed):
  #   frequency: 600
  #   observations:
  #     range: [-0.02, 0.02]
  #     operation: "additive"
  #     distribution: "gaussian"
  #     schedule: "linear" # can be 'linear', 'constant'
  #     schedule_steps: 1000
  #   actions:
  #     range: [-0.05, 0.05]
  #     operation: "additive"
  #     distribution: "gaussian"
  #     schedule: "linear" # can be 'linear', 'constant'
  #     schedule_steps: 1000
  #   sim_params:
  #     gravity:
  #       range: [0.0, 0.3]
  #       operation: "additive"
  #       distribution: "gaussian"
  #       schedule: "linear" # can be 'linear', 'constant'
  #       schedule_steps: 1000
  #   actor_params:
  #     hand: # Assuming actor name is 'hand'
  #       color:
  #         range: [0.1, 0.9]
  #         operation: "scaling"
  #         distribution: "uniform"
  #         schedule: "linear" # can be 'linear', 'constant'
  #         schedule_steps: 1000
  #       scale:
  #         range: [0.9, 1.1]
  #         operation: "scaling"
  #         distribution: "uniform"
  #         schedule: "linear" # can be 'linear', 'constant'
  #         schedule_steps: 1000
  #     rope: # Assuming actor name is 'rope'
  #       color:
  #         range: [0.1, 0.9]
  #         operation: "scaling"
  #         distribution: "uniform"
  #         schedule: "linear" # can be 'linear', 'constant'
  #         schedule_steps: 1000
  #   dof_properties:
  #     # stiffness:
  #     #   range: [0.9, 1.1]
  #     #   operation: "scaling"
  #     #   distribution: "uniform"
  #     #   schedule: "linear" # can be 'linear', 'constant'
  #     #   schedule_steps: 1000
  #     # damping:
  #     #   range: [0.9, 1.1]
  #     #   operation: "scaling"
  #     #   distribution: "uniform"
  #     #   schedule: "linear" # can be 'linear', 'constant'
  #     #   schedule_steps: 1000
  #     dof_pos:
  #       range: [-0.1, 0.1]
  #       operation: "additive"
  #       distribution: "gaussian"
  #       schedule: "linear" # can be 'linear', 'constant'
  #       schedule_steps: 1000
  #     dof_vel:
  #       range: [-0.1, 0.1]
  #       operation: "additive"
  #       distribution: "gaussian"
  #       schedule: "linear" # can be 'linear', 'constant'
  #       schedule_steps: 1000
  # --- END DIAGNOSTIC EDIT ---

sim:
  exportScene: False 
  exportStates: False
  dt: 0.01667 # 1/60
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 8
    num_velocity_iterations: 0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_offset: 0.002
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2 
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 5.0
    contact_collection: 0 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (broken - do not use!) 